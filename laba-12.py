'''Вычислить сумму знакопеременного ряда |х*(3n-1)!|/(3n-1)!, где х-матрица ранга к (к и матрица задаются случайным образом),
 n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
 У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого  +.'''

import random

def calculate_series_sum(k, t):
    # Генерация случайной матрицы размерности k x k
    matrix = [[random.uniform(-1, 1) for _ in range(k)] for _ in range(k)]
    sum = 0
    term = matrix[0][0]

    factorial = 1
    for n in range(1, 2*k+1):
        # Вычисление факториала (3n-1)!
        factorial *= n
        # Вычисление текущего слагаемого х*(3n-1)!/(3n-1)!
        term *= matrix[(3*n-1) % k][(3*n-1) % k]
        term /= factorial

        # Обновление суммы ряда в зависимости от знака слагаемого
        if n % 2 == 0:
            sum -= term
        else:
            sum += term

        # Проверка достижения требуемой точности
        if abs(term) < 0.1**t:
            break

    # Возвращение матрицы и вычисленной суммы ряда
    return matrix, sum

def print_matrix(matrix):
    # Вывод элементов матрицы
    for row in matrix:
        print(row)

# Ввод размерности матрицы с ограничением на диапазон
k = int(input("Введите размерность матрицы: "))
while k <= 0:
    print("Размерность матрицы должна быть положительным числом.")
    k = int(input("Введите размерность матрицы: "))

# Ввод точности вычислений с ограничением на диапазон
t = int(input("Введите точность вычислений (количество знаков после запятой): "))
while t <= 0:
    print("Точность вычислений должна быть положительным числом.")
    t = int(input("Введите точность вычислений (количество знаков после запятой): "))

# Вычисление суммы ряда и формирование матрицы
matrix, result = calculate_series_sum(k, t)

print("Матрица:")
print_matrix(matrix)  # Вывод матрицы
print(f"Сумма знакопеременного ряда с точностью {t} знаков после запятой: {result:.{t}f}")  # Вывод результата 